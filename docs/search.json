[
  {
    "objectID": "st_558_hw3.html",
    "href": "st_558_hw3.html",
    "title": "ST558 HW 3: Tidyverse, data reading, joins",
    "section": "",
    "text": "If your working directory is myfolder/homework/, what relative path would you specify to get the file located at myfolder/MyData.csv?\n\n“../MyData.csv”\n\nWhat are the major benefits of using R projects?\n\nR Projects allow reproducibility and easy collaboration by allowing us to share project folders with others, such that others can easily run our code without having to worry about absolute filepaths.\n\nWhat is git and what is github?\n\nGit is a version control system that allows others (and future us) to track file versions, work on code, track changes, deconflict changes, etc. Github is a website where users can store git projects for ease of collaboration.\n\nWhat are the two main differences between a tibble and a data.frame?\n\nThe two main differences are in the printing and subsetting of data.frames and tibbles. tibbles only show the first 10 rows upon printing, and only as many columns as will fit when printing. Data.frames will print everything over many, many lines. Also, tibbles are strict about subsetting – they’ll return an error when you try to access a column that doesn’t exist, and are more consistent in use between [ and [[. The former returns a tibble, and the latter returns a vector.\n\nRewrite the following nested function call using baseR’s chaining operator:\n\n\n# NESTED\narrange(filter(select(as_tibble(iris), starts_with(\"Petal\"), Species), Petal.Length &lt;\n1.55), Species)\n\n# CHAINED\niris |&gt; \n  as_tibble() |&gt; \n  select(starts_with(\"Petal\"), Species) |&gt; \n  filter(Petal.Length &lt; 1.55) |&gt;\n  arrange(Species)\n\n\nWhat is meant by long format data and wide format data? Which do we generally prefer for statistical analysis?\n\nLong format data is when one row is a single observation, and a column is a single variable. Wide format data is when multiple observations are contained on one row, spanning several columns. For statistical analysis, we generally prefer long format."
  },
  {
    "objectID": "st_558_hw3.html#task-1-conceptual-questions",
    "href": "st_558_hw3.html#task-1-conceptual-questions",
    "title": "ST558 HW 3: Tidyverse, data reading, joins",
    "section": "",
    "text": "If your working directory is myfolder/homework/, what relative path would you specify to get the file located at myfolder/MyData.csv?\n\n“../MyData.csv”\n\nWhat are the major benefits of using R projects?\n\nR Projects allow reproducibility and easy collaboration by allowing us to share project folders with others, such that others can easily run our code without having to worry about absolute filepaths.\n\nWhat is git and what is github?\n\nGit is a version control system that allows others (and future us) to track file versions, work on code, track changes, deconflict changes, etc. Github is a website where users can store git projects for ease of collaboration.\n\nWhat are the two main differences between a tibble and a data.frame?\n\nThe two main differences are in the printing and subsetting of data.frames and tibbles. tibbles only show the first 10 rows upon printing, and only as many columns as will fit when printing. Data.frames will print everything over many, many lines. Also, tibbles are strict about subsetting – they’ll return an error when you try to access a column that doesn’t exist, and are more consistent in use between [ and [[. The former returns a tibble, and the latter returns a vector.\n\nRewrite the following nested function call using baseR’s chaining operator:\n\n\n# NESTED\narrange(filter(select(as_tibble(iris), starts_with(\"Petal\"), Species), Petal.Length &lt;\n1.55), Species)\n\n# CHAINED\niris |&gt; \n  as_tibble() |&gt; \n  select(starts_with(\"Petal\"), Species) |&gt; \n  filter(Petal.Length &lt; 1.55) |&gt;\n  arrange(Species)\n\n\nWhat is meant by long format data and wide format data? Which do we generally prefer for statistical analysis?\n\nLong format data is when one row is a single observation, and a column is a single variable. Wide format data is when multiple observations are contained on one row, spanning several columns. For statistical analysis, we generally prefer long format."
  },
  {
    "objectID": "st_558_hw3.html#task-2-reading-delimited-data",
    "href": "st_558_hw3.html#task-2-reading-delimited-data",
    "title": "ST558 HW 3: Tidyverse, data reading, joins",
    "section": "Task 2: Reading delimited data",
    "text": "Task 2: Reading delimited data\nFirst, we’ll be reading in some data from the UCI Machine Learning Repository: glass.data and yeast.data. Later, we’ll be combining delimited data and Excel data.\n\nGlass data\nFirst, glass.data. The file looks to be comma-separated. We’ll read this in, print it out, overwrite the Type_of_glass column with something more readable, and filter only to keep Fe &lt; 0.2 and Type_of_glass %in% c(\"tableware\", \"headlamp\")\n\nlibrary(readr)\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\n# vector for glass.data column names\nglass_cols &lt;- c(\"ID\", \"RI\", \"Na\", \"Mg\", \"Al\", \"Si\", \"K\", \"Ca\", \"Ba\", \"Fe\", \"Type_of_glass\")\n\n# Reading in glass data, then assigning column names\nglass.data &lt;- read_csv(\"https://www4.stat.ncsu.edu/~online/datasets/glass.data\", col_names = glass_cols)\n\nRows: 214 Columns: 11\n\n\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\ndbl (11): ID, RI, Na, Mg, Al, Si, K, Ca, Ba, Fe, Type_of_glass\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n# print\nglass.data\n\n# A tibble: 214 × 11\n      ID    RI    Na    Mg    Al    Si     K    Ca    Ba    Fe Type_of_glass\n   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;         &lt;dbl&gt;\n 1     1  1.52  13.6  4.49  1.1   71.8  0.06  8.75     0  0                1\n 2     2  1.52  13.9  3.6   1.36  72.7  0.48  7.83     0  0                1\n 3     3  1.52  13.5  3.55  1.54  73.0  0.39  7.78     0  0                1\n 4     4  1.52  13.2  3.69  1.29  72.6  0.57  8.22     0  0                1\n 5     5  1.52  13.3  3.62  1.24  73.1  0.55  8.07     0  0                1\n 6     6  1.52  12.8  3.61  1.62  73.0  0.64  8.07     0  0.26             1\n 7     7  1.52  13.3  3.6   1.14  73.1  0.58  8.17     0  0                1\n 8     8  1.52  13.2  3.61  1.05  73.2  0.57  8.24     0  0                1\n 9     9  1.52  14.0  3.58  1.37  72.1  0.56  8.3      0  0                1\n10    10  1.52  13    3.6   1.36  73.0  0.57  8.4      0  0.11             1\n# ℹ 204 more rows\n\n# Overwriting Type_of_glass\n# I don't like nesting ifelse(), so I'll use dplyr's case_when() to update Type_of_glass\n\nglass.data |&gt;\n  mutate(\n    Type_of_glass = case_when(\n      Type_of_glass == 1 ~ \"building_windows_float_processed\",\n      Type_of_glass == 2 ~ \"building_windows_non_float_processed\",\n      Type_of_glass == 3 ~ \"vehicle_windows_float_processed\", \n      Type_of_glass == 4 ~ \"vehicle_windows_non_float_processed\", \n      Type_of_glass == 5 ~ \"containers\",\n      Type_of_glass == 6 ~ \"tableware\",\n      Type_of_glass == 7 ~ \"headlamps\"\n    )\n  ) |&gt;\n  filter(Fe &lt; 0.2 & (Type_of_glass %in% c(\"tableware\", \"headlamps\")))\n\n# A tibble: 38 × 11\n      ID    RI    Na    Mg    Al    Si     K    Ca    Ba    Fe Type_of_glass\n   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;        \n 1   177  1.52  14    2.39  1.56  72.4  0     9.57  0        0 tableware    \n 2   178  1.52  13.8  2.41  1.19  72.8  0     9.77  0        0 tableware    \n 3   179  1.52  14.5  2.24  1.62  72.4  0     9.26  0        0 tableware    \n 4   180  1.52  14.1  2.19  1.66  72.7  0     9.32  0        0 tableware    \n 5   181  1.51  14.4  1.74  1.54  74.6  0     7.59  0        0 tableware    \n 6   182  1.52  15.0  0.78  1.74  72.5  0     9.95  0        0 tableware    \n 7   183  1.52  14.2  0     2.09  72.7  0    10.9   0        0 tableware    \n 8   184  1.52  14.6  0     0.56  73.5  0    11.2   0        0 tableware    \n 9   185  1.51  17.4  0     0.34  75.4  0     6.65  0        0 tableware    \n10   186  1.51  13.7  3.2   1.81  72.8  1.76  5.43  1.19     0 headlamps    \n# ℹ 28 more rows\n\n\n\n\nYeast data\nyeast.data looks to be separated by spaces. We’ll read it in, remove the seq_name and nuc columns, then add columns representing the mean and median of each numeric variable for each class grouping.\n\n# Defining col names and reading in space-separated data\nyeast_cols &lt;- c(\"seq_name\", \"mcg\", \"gvh\", \"alm\", \"mit\", \"erl\", \"pox\", \"vac\", \"nuc\", \"class\")\nyeast.data &lt;- read_table(\"https://www4.stat.ncsu.edu/~online/datasets/yeast.data\", col_names = yeast_cols)\n\n\n── Column specification ────────────────────────────────────────────────────────\ncols(\n  seq_name = col_character(),\n  mcg = col_double(),\n  gvh = col_double(),\n  alm = col_double(),\n  mit = col_double(),\n  erl = col_double(),\n  pox = col_double(),\n  vac = col_double(),\n  nuc = col_double(),\n  class = col_character()\n)\n\n# Dropping seq_name, nuc, then grouping by class to add mean and median columns for each numeric variable\nyeast.data |&gt;\n  select(-seq_name, -nuc) |&gt;\n  group_by(class) |&gt;\n  mutate(across(where(is.numeric), list(mean = mean, median = median)))\n\n# A tibble: 1,484 × 22\n# Groups:   class [10]\n     mcg   gvh   alm   mit   erl   pox   vac class mcg_mean mcg_median gvh_mean\n   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;    &lt;dbl&gt;      &lt;dbl&gt;    &lt;dbl&gt;\n 1  0.58  0.61  0.47  0.13   0.5   0    0.48 MIT      0.521       0.51    0.533\n 2  0.43  0.67  0.48  0.27   0.5   0    0.53 MIT      0.521       0.51    0.533\n 3  0.64  0.62  0.49  0.15   0.5   0    0.53 MIT      0.521       0.51    0.533\n 4  0.58  0.44  0.57  0.13   0.5   0    0.54 NUC      0.452       0.45    0.456\n 5  0.42  0.44  0.48  0.54   0.5   0    0.48 MIT      0.521       0.51    0.533\n 6  0.51  0.4   0.56  0.17   0.5   0.5  0.49 CYT      0.481       0.48    0.470\n 7  0.5   0.54  0.48  0.65   0.5   0    0.53 MIT      0.521       0.51    0.533\n 8  0.48  0.45  0.59  0.2    0.5   0    0.58 NUC      0.452       0.45    0.456\n 9  0.55  0.5   0.66  0.36   0.5   0    0.49 MIT      0.521       0.51    0.533\n10  0.4   0.39  0.6   0.15   0.5   0    0.58 CYT      0.481       0.48    0.470\n# ℹ 1,474 more rows\n# ℹ 11 more variables: gvh_median &lt;dbl&gt;, alm_mean &lt;dbl&gt;, alm_median &lt;dbl&gt;,\n#   mit_mean &lt;dbl&gt;, mit_median &lt;dbl&gt;, erl_mean &lt;dbl&gt;, erl_median &lt;dbl&gt;,\n#   pox_mean &lt;dbl&gt;, pox_median &lt;dbl&gt;, vac_mean &lt;dbl&gt;, vac_median &lt;dbl&gt;\n\n\nNext, we look at Excel data.\n\n\nCombining Excel and Delimited Data\nWe’ll be looking at red/white wine data from the UCI Machine Learning Repository. We’ll read in the white-wine.xlsx file for white wines, and we’ll read in red wines from the data site for this course. Since the variable names in the white wine data are non-standard, we’ll use the second sheet to grab standard names.\n\nlibrary(readxl)\n\n# Reading in white wines from the Excel file sheet 1.\nwhite_wine &lt;- read_excel(\"white-wine.xlsx\", sheet = 1)\n\nwhite_wine\n\n# A tibble: 4,898 × 12\n   `fixed acidity` `volatile acidity` `citric acid` `residual sugar` chlorides\n             &lt;dbl&gt;              &lt;dbl&gt;         &lt;dbl&gt;            &lt;dbl&gt;     &lt;dbl&gt;\n 1               7               0.27          0.36             20.7     0.045\n 2              63               0.3           0.34              1.6     0.049\n 3              81               0.28          0.4               6.9     0.05 \n 4              72               0.23          0.32              8.5     0.058\n 5              72               0.23          0.32              8.5     0.058\n 6              81               0.28          0.4               6.9     0.05 \n 7              62               0.32          0.16              7       0.045\n 8               7               0.27          0.36             20.7     0.045\n 9              63               0.3           0.34              1.6     0.049\n10              81               0.22          0.43              1.5     0.044\n# ℹ 4,888 more rows\n# ℹ 7 more variables: `free sulfur dioxide` &lt;dbl&gt;,\n#   `total sulfur dioxide` &lt;dbl&gt;, density &lt;dbl&gt;, pH &lt;dbl&gt;, sulphates &lt;dbl&gt;,\n#   alcohol &lt;dbl&gt;, quality &lt;dbl&gt;\n\n\nThe names are non-standard. We can fix these with sheet 2 of the file which contains standard names.\nWhile we’re at it, we’ll also go ahead and add a wine_color column for this subset, setting the value to \"white\".\n\n# Sheet 2 w/ std names\nwhite_wine_std_names &lt;- read_excel(\"white-wine.xlsx\", sheet = 2) |&gt; pull(Variables)\n\n# Overwriting non-standard names w/ standard names\nnames(white_wine) &lt;- white_wine_std_names\n\nwhite_wine &lt;- white_wine |&gt; mutate(type = \"white\")\n\nNow we’ll pull in the red wine data and append it to the white wine data. The data appears to be delimited by a semi-colon. The names are also non-standard, so we’ll use the white wines standard names to overwrite the red wine standard names.\n\nred_wine &lt;- read_delim(\"https://www4.stat.ncsu.edu/~online/datasets/red-wine.csv\", \n                       delim = \";\")\n\nRows: 1599 Columns: 12\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \";\"\ndbl (12): fixed acidity, volatile acidity, citric acid, residual sugar, chlo...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nnames(red_wine) &lt;- white_wine_std_names\n\nred_wine &lt;- red_wine |&gt; mutate(type = \"red\")\n\nwines &lt;- white_wine |&gt; bind_rows(red_wine)\n\nNext, we’ll do a few things:\n\nWe’ll filter to look only at wines where quality &gt; 6.5 and alcohol &lt; 132\nWe’ll sort from highest to lowest quality\nWe’ll grab only variables that contain \"acid\", the alcohol variable, and the type and quality variables\nWe’ll add the mean and standard deviation of the alcohol variable for each setting of the quality variable.\n\n\nwines |&gt;\n  filter(quality &gt; 6.5 & alcohol &lt; 132) |&gt;\n  arrange(desc(quality)) |&gt;\n  select(contains(\"acid\"), alcohol, type, quality) |&gt;\n  group_by(quality) |&gt;\n  mutate(across(alcohol, list(mean = mean, sd = sd)))\n\n# A tibble: 1,206 × 8\n# Groups:   quality [3]\n   fixed_acidity volatile_acidity citric_acid alcohol type  quality alcohol_mean\n           &lt;dbl&gt;            &lt;dbl&gt;       &lt;dbl&gt;   &lt;dbl&gt; &lt;chr&gt;   &lt;dbl&gt;        &lt;dbl&gt;\n 1            91             0.27        0.45     104 white       9        122. \n 2            66             0.36        0.29     124 white       9        122. \n 3            74             0.24        0.36     125 white       9        122. \n 4            69             0.36        0.34     127 white       9        122. \n 5            71             0.26        0.49     129 white       9        122. \n 6            62             0.66        0.48     128 white       8         94.1\n 7            62             0.66        0.48     128 white       8         94.1\n 8            68             0.26        0.42     105 white       8         94.1\n 9            67             0.23        0.31     107 white       8         94.1\n10            67             0.23        0.31     107 white       8         94.1\n# ℹ 1,196 more rows\n# ℹ 1 more variable: alcohol_sd &lt;dbl&gt;"
  },
  {
    "objectID": "st_558_hw3.html#task-3-database-practice",
    "href": "st_558_hw3.html#task-3-database-practice",
    "title": "ST558 HW 3: Tidyverse, data reading, joins",
    "section": "Task 3: Database Practice",
    "text": "Task 3: Database Practice\nHere we practice connecting to databases to analyze data. We’ll return all the data in the Teams table for the year 2015. We’ll do it with R syntax first, then we’ll write SQL to do the same thing.\n\nlibrary(DBI)\ncon &lt;- dbConnect(RSQLite::SQLite(), \"lahman.db\")\n\n# R data manipulation syntax\ntbl(con, \"Teams\") |&gt;\n  filter(yearID == 2015) |&gt;\n  collect()\n\n# A tibble: 30 × 48\n   yearID lgID  teamID franchID divID  Rank     G Ghome     W     L DivWin WCWin\n    &lt;int&gt; &lt;chr&gt; &lt;chr&gt;  &lt;chr&gt;    &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt;  &lt;chr&gt;\n 1   2015 NL    ARI    ARI      W         3   162    81    79    83 N      N    \n 2   2015 NL    ATL    ATL      E         4   162    81    67    95 N      N    \n 3   2015 AL    BAL    BAL      E         3   162    78    81    81 N      N    \n 4   2015 AL    BOS    BOS      E         5   162    81    78    84 N      N    \n 5   2015 AL    CHA    CHW      C         4   162    81    76    86 N      N    \n 6   2015 NL    CHN    CHC      C         3   162    81    97    65 N      Y    \n 7   2015 NL    CIN    CIN      C         5   162    81    64    98 N      N    \n 8   2015 AL    CLE    CLE      C         3   161    80    81    80 N      N    \n 9   2015 NL    COL    COL      W         5   162    81    68    94 N      N    \n10   2015 AL    DET    DET      C         5   161    81    74    87 N      N    \n# ℹ 20 more rows\n# ℹ 36 more variables: LgWin &lt;chr&gt;, WSWin &lt;chr&gt;, R &lt;int&gt;, AB &lt;int&gt;, H &lt;int&gt;,\n#   X2B &lt;int&gt;, X3B &lt;int&gt;, HR &lt;int&gt;, BB &lt;int&gt;, SO &lt;int&gt;, SB &lt;int&gt;, CS &lt;int&gt;,\n#   HBP &lt;int&gt;, SF &lt;int&gt;, RA &lt;int&gt;, ER &lt;int&gt;, ERA &lt;dbl&gt;, CG &lt;int&gt;, SHO &lt;int&gt;,\n#   SV &lt;int&gt;, IPouts &lt;int&gt;, HA &lt;int&gt;, HRA &lt;int&gt;, BBA &lt;int&gt;, SOA &lt;int&gt;, E &lt;int&gt;,\n#   DP &lt;int&gt;, FP &lt;dbl&gt;, name &lt;chr&gt;, park &lt;chr&gt;, attendance &lt;int&gt;, BPF &lt;int&gt;,\n#   PPF &lt;int&gt;, teamIDBR &lt;chr&gt;, teamIDlahman45 &lt;chr&gt;, teamIDretro &lt;chr&gt;\n\n# SQL for data manipulation\ntbl(con, sql(\"SELECT * FROM Teams WHERE yearID = 2015\")) |&gt; collect()\n\n# A tibble: 30 × 48\n   yearID lgID  teamID franchID divID  Rank     G Ghome     W     L DivWin WCWin\n    &lt;int&gt; &lt;chr&gt; &lt;chr&gt;  &lt;chr&gt;    &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt;  &lt;chr&gt;\n 1   2015 NL    ARI    ARI      W         3   162    81    79    83 N      N    \n 2   2015 NL    ATL    ATL      E         4   162    81    67    95 N      N    \n 3   2015 AL    BAL    BAL      E         3   162    78    81    81 N      N    \n 4   2015 AL    BOS    BOS      E         5   162    81    78    84 N      N    \n 5   2015 AL    CHA    CHW      C         4   162    81    76    86 N      N    \n 6   2015 NL    CHN    CHC      C         3   162    81    97    65 N      Y    \n 7   2015 NL    CIN    CIN      C         5   162    81    64    98 N      N    \n 8   2015 AL    CLE    CLE      C         3   161    80    81    80 N      N    \n 9   2015 NL    COL    COL      W         5   162    81    68    94 N      N    \n10   2015 AL    DET    DET      C         5   161    81    74    87 N      N    \n# ℹ 20 more rows\n# ℹ 36 more variables: LgWin &lt;chr&gt;, WSWin &lt;chr&gt;, R &lt;int&gt;, AB &lt;int&gt;, H &lt;int&gt;,\n#   X2B &lt;int&gt;, X3B &lt;int&gt;, HR &lt;int&gt;, BB &lt;int&gt;, SO &lt;int&gt;, SB &lt;int&gt;, CS &lt;int&gt;,\n#   HBP &lt;int&gt;, SF &lt;int&gt;, RA &lt;int&gt;, ER &lt;int&gt;, ERA &lt;dbl&gt;, CG &lt;int&gt;, SHO &lt;int&gt;,\n#   SV &lt;int&gt;, IPouts &lt;int&gt;, HA &lt;int&gt;, HRA &lt;int&gt;, BBA &lt;int&gt;, SOA &lt;int&gt;, E &lt;int&gt;,\n#   DP &lt;int&gt;, FP &lt;dbl&gt;, name &lt;chr&gt;, park &lt;chr&gt;, attendance &lt;int&gt;, BPF &lt;int&gt;,\n#   PPF &lt;int&gt;, teamIDBR &lt;chr&gt;, teamIDlahman45 &lt;chr&gt;, teamIDretro &lt;chr&gt;\n\n\nNow we’ll stick to dplyr functions for data manipulation and add a little complexity. We’ll be working with the HallOfFame and People tables. We’ll be grabbing only players inducted into the hall of fame, and then joining their actual first and last names to that roster.\n\n# Grabbing players inducted into the Hall of Fame\nhof_subset &lt;- tbl(con, \"HallOfFame\") |&gt; \n  filter(inducted == \"Y\") |&gt; \n  select(playerID, yearID, category)\n\nhof_subset |&gt; collect()\n\n# A tibble: 340 × 3\n   playerID  yearID category         \n   &lt;chr&gt;      &lt;int&gt; &lt;chr&gt;            \n 1 cobbty01    1936 Player           \n 2 ruthba01    1936 Player           \n 3 wagneho01   1936 Player           \n 4 mathech01   1936 Player           \n 5 johnswa01   1936 Player           \n 6 lajoina01   1937 Player           \n 7 speaktr01   1937 Player           \n 8 youngcy01   1937 Player           \n 9 bulkemo99   1937 Pioneer/Executive\n10 johnsba99   1937 Pioneer/Executive\n# ℹ 330 more rows\n\n# Grabbing first and last names, along w/ playerID for joining\npeople_subset &lt;- tbl(con, \"People\") |&gt; select(playerID, nameFirst, nameLast)\n\nhof_names_subset &lt;- hof_subset |&gt; left_join(people_subset)\n\nJoining with `by = join_by(playerID)`\n\nhof_names_subset |&gt; collect()\n\n# A tibble: 340 × 5\n   playerID  yearID category          nameFirst nameLast \n   &lt;chr&gt;      &lt;int&gt; &lt;chr&gt;             &lt;chr&gt;     &lt;chr&gt;    \n 1 cobbty01    1936 Player            Ty        Cobb     \n 2 ruthba01    1936 Player            Babe      Ruth     \n 3 wagneho01   1936 Player            Honus     Wagner   \n 4 mathech01   1936 Player            Christy   Mathewson\n 5 johnswa01   1936 Player            Walter    Johnson  \n 6 lajoina01   1937 Player            Nap       Lajoie   \n 7 speaktr01   1937 Player            Tris      Speaker  \n 8 youngcy01   1937 Player            Cy        Young    \n 9 bulkemo99   1937 Pioneer/Executive Morgan    Bulkeley \n10 johnsba99   1937 Pioneer/Executive Ban       Johnson  \n# ℹ 330 more rows\n\n\nNow we’ll be looking at Manager Win/Loss records. We’ll be chaining to calculate wins and losses per manager, then use those aggregates to compute their career win percentage.\n\nmanagers_subset &lt;- tbl(con, \"Managers\") |&gt; filter(plyrMgr == \"Y\") |&gt; select(playerID, G, W, L)\n\nmgr_win_loss_records &lt;- managers_subset |&gt;\ngroup_by(playerID) |&gt;\nsummarize(\n  G_managed = sum(G, na.rm = TRUE), \n  Total_W = sum(W, na.rm = TRUE), \n  Total_L = sum(L, na.rm = TRUE)\n  ) |&gt;\n  collect() |&gt;\n  mutate(win_pct = Total_W / G_managed) |&gt; \n  arrange(desc(win_pct))\n\n# printing\nmgr_win_loss_records\n\n# A tibble: 247 × 5\n   playerID  G_managed Total_W Total_L win_pct\n   &lt;chr&gt;         &lt;int&gt;   &lt;int&gt;   &lt;int&gt;   &lt;dbl&gt;\n 1 highadi01        40      29      11   0.725\n 2 wrighha01       423     306     109   0.723\n 3 startjo01        25      18       7   0.72 \n 4 grohhe01         10       7       3   0.7  \n 5 wrighge01        85      59      25   0.694\n 6 clemeja01        19      13       6   0.684\n 7 streega01       154     101      53   0.656\n 8 campaco01        42      27      14   0.643\n 9 mcbridi01       252     161      85   0.639\n10 spaldal01       126      78      47   0.619\n# ℹ 237 more rows\n\n\nWe’ll now return records for people that managed a team and were inducted into the hall of fame. We can do this by doing an inner_join() between the Hall of Fame subset with player names, and the Manager’s Win/Loss records.\n\nhof_mgrs &lt;- hof_names_subset |&gt; collect() |&gt; inner_join(mgr_win_loss_records)\n\nJoining with `by = join_by(playerID)`\n\nhof_mgrs \n\n# A tibble: 63 × 9\n   playerID yearID category nameFirst nameLast G_managed Total_W Total_L win_pct\n   &lt;chr&gt;     &lt;int&gt; &lt;chr&gt;    &lt;chr&gt;     &lt;chr&gt;        &lt;int&gt;   &lt;int&gt;   &lt;int&gt;   &lt;dbl&gt;\n 1 cobbty01   1936 Player   Ty        Cobb           933     479     444   0.513\n 2 wagneho…   1936 Player   Honus     Wagner           5       1       4   0.2  \n 3 mathech…   1936 Player   Christy   Mathews…        69      25      43   0.362\n 4 lajoina…   1937 Player   Nap       Lajoie         700     377     309   0.539\n 5 speaktr…   1937 Player   Tris      Speaker       1139     617     520   0.542\n 6 youngcy…   1937 Player   Cy        Young            6       3       3   0.5  \n 7 mackco01   1937 Manager  Connie    Mack           289     149     134   0.516\n 8 mcgrajo…   1937 Manager  John      McGraw        1018     596     402   0.585\n 9 wrighge…   1937 Pioneer… George    Wright          85      59      25   0.694\n10 sislege…   1939 Player   George    Sisler         462     218     241   0.472\n# ℹ 53 more rows\n\ndbDisconnect(con)"
  }
]